#!/usr/bin/env python

# This script evaluated the performance files generated by the ./run_PFE_perf.sh
# and writes the results to csv files

import csv
import os.path
import re
import statistics
import sys

if (len(sys.argv) != 2):
    print("Usage: ./eval_perf.py perf_2020_01_01-1337")
    sys.exit(1)

file_prefix = sys.argv[1][:20]
print("File prefix", file_prefix)

def get_timing(file_ref, prefix, label):
    file_ref.seek(0)
    values = [float(line.split()[2])/1000 for line in file_ref if line.startswith("[TIME] %s" % label)]
    print("%s] %s: %9.2f ms" % (prefix, label.rjust(36, " "), statistics.mean(values)))
    return statistics.mean(values)

csv_fieldnames = ["g", "total"]

print("Writing csv...")
with open("time.csv", 'w') as file_time_csv:
    csv_time = csv.DictWriter(file_time_csv, fieldnames=csv_fieldnames)
    csv_time.writeheader()

    for g in [1000, 10000, 100000]:
        print("\n\nPerformance stats for g = %d gates" % g)
        if (not os.path.isfile("%s_SERVER_%s" % (file_prefix, g))):
            print("%s_SERVER_%s does not exist" % (file_prefix, g))
            continue

        with open("%s_SERVER_%s" % (file_prefix, g)) as file_server:
            detected_runs_s = len([line for line in file_server if line.startswith("START UC")])
            print("Detected number of runs: %d" % detected_runs_s)
            if (detected_runs_s == 0):
                continue

            file_server.seek(0)
            time_total_s = statistics.mean([float(line.split()[3][:-2]) for line in file_server if line.startswith("UC Construction Time: ")])
            print("\n[S/C] Total time: %.2f ms" % time_total_s)

            csv_time.writerow({"g": g, "total": time_total_s})
